import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '../components/ui/Card';
import { Button } from '../components/ui/Button';
import { Input } from '../components/ui/Input';
import { Badge } from '../components/ui/Badge';
import { formatDate } from '../lib/utils';
import { 
  Shield, 
  Plus, 
  Search, 
  MapPin,
  Users,
  Calendar,
  Edit,
  Trash2,
  AlertTriangle,
  BarChart3,
  FileText
} from 'lucide-react';

interface VulnerabilityAssessment {
  id: number;
  community_name: string;
  location: string;
  latitude?: number;
  longitude?: number;
  population: number;
  vulnerability_level: string;
  risk_factors: string[];
  food_security_status: string;
  water_access: string;
  healthcare_access: string;
  infrastructure_quality: string;
  climate_risks: string[];
  socioeconomic_factors: string;
  recommendations: string;
  assessed_by: string;
  assessment_date: string;
  next_assessment_due: string;
  priority_score: number;
}

const VulnerabilityAssessment: React.FC = () => {
  const [assessments, setAssessments] = React.useState<VulnerabilityAssessment[]>([]);
  const [loading, setLoading] = React.useState(true);
  const [showAddForm, setShowAddForm] = React.useState(false);
  const [editingAssessment, setEditingAssessment] = React.useState<VulnerabilityAssessment | null>(null);
  const [searchTerm, setSearchTerm] = React.useState('');
  const [filterVulnerability, setFilterVulnerability] = React.useState('all');
  const [filterPriority, setFilterPriority] = React.useState('all');

  const [formData, setFormData] = React.useState({
    community_name: '',
    location: '',
    latitude: '',
    longitude: '',
    population: '',
    vulnerability_level: 'medium',
    food_security_status: 'moderate',
    water_access: 'adequate',
    healthcare_access: 'limited',
    infrastructure_quality: 'poor',
    socioeconomic_factors: '',
    recommendations: '',
    assessed_by: '',
    climate_risks: [] as string[],
    risk_factors: [] as string[]
  });

  React.useEffect(() => {
    fetchAssessments();
  }, []);

  const fetchAssessments = async () => {
    try {
      setLoading(true);
      // Mock data for comprehensive vulnerability assessments
      const mockAssessments: VulnerabilityAssessment[] = [
        {
          id: 1,
          community_name: 'Khayelitsha Township',
          location: 'Cape Town, Western Cape',
          latitude: -34.0351,
          longitude: 18.6926,
          population: 45000,
          vulnerability_level: 'high',
          risk_factors: ['flooding', 'food_insecurity', 'poor_sanitation', 'unemployment'],
          food_security_status: 'poor',
          water_access: 'limited',
          healthcare_access: 'limited',
          infrastructure_quality: 'poor',
          climate_risks: ['flooding', 'drought', 'extreme_heat'],
          socioeconomic_factors: 'High unemployment (65%), informal settlements, limited access to services',
          recommendations: 'Improve drainage systems, establish food distribution centers, enhance healthcare services',
          assessed_by: 'Community Health Team',
          assessment_date: '2024-01-10T00:00:00Z',
          next_assessment_due: '2024-07-10T00:00:00Z',
          priority_score: 85
        },
        {
          id: 2,
          community_name: 'Soweto District',
          location: 'Johannesburg, Gauteng',
          latitude: -26.2678,
          longitude: 27.8585,
          population: 120000,
          vulnerability_level: 'medium',
          risk_factors: ['air_pollution', 'food_insecurity', 'overcrowding'],
          food_security_status: 'moderate',
          water_access: 'adequate',
          healthcare_access: 'adequate',
          infrastructure_quality: 'fair',
          climate_risks: ['extreme_heat', 'air_pollution', 'drought'],
          socioeconomic_factors: 'Mixed income levels, some unemployment, established infrastructure',
          recommendations: 'Address air quality issues, strengthen food assistance programs',
          assessed_by: 'Urban Planning Department',
          assessment_date: '2024-01-08T00:00:00Z',
          next_assessment_due: '2024-07-08T00:00:00Z',
          priority_score: 65
        },
        {
          id: 3,
          community_name: 'Rural Limpopo Village',
          location: 'Polokwane, Limpopo',
          latitude: -23.9045,
          longitude: 29.4689,
          population: 3500,
          vulnerability_level: 'very_high',
          risk_factors: ['drought', 'food_insecurity', 'water_scarcity', 'isolation'],
          food_security_status: 'critical',
          water_access: 'poor',
          healthcare_access: 'very_poor',
          infrastructure_quality: 'very_poor',
          climate_risks: ['drought', 'extreme_heat', 'crop_failure'],
          socioeconomic_factors: 'Agriculture-dependent, high poverty rates, limited transport access',
          recommendations: 'Emergency food aid, water infrastructure development, mobile healthcare services',
          assessed_by: 'Rural Development NGO',
          assessment_date: '2024-01-12T00:00:00Z',
          next_assessment_due: '2024-04-12T00:00:00Z',
          priority_score: 95
        },
        {
          id: 4,
          community_name: 'Port Elizabeth Coastal Area',
          location: 'Gqeberha, Eastern Cape',
          latitude: -33.9608,
          longitude: 25.6022,
          population: 8200,
          vulnerability_level: 'high',
          risk_factors: ['coastal_flooding', 'erosion', 'food_insecurity'],
          food_security_status: 'poor',
          water_access: 'adequate',
          healthcare_access: 'fair',
          infrastructure_quality: 'fair',
          climate_risks: ['coastal_flooding', 'sea_level_rise', 'storm_surge'],
          socioeconomic_factors: 'Fishing-dependent economy, climate change impacts on livelihoods',
          recommendations: 'Coastal protection measures, alternative livelihood programs',
          assessed_by: 'Coastal Management Team',
          assessment_date: '2024-01-15T00:00:00Z',
          next_assessment_due: '2024-07-15T00:00:00Z',
          priority_score: 78
        }
      ];
      
      setAssessments(mockAssessments);
    } catch (error) {
      console.error('Failed to fetch assessments:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const calculatePriorityScore = () => {
        let score = 0;
        if (formData.vulnerability_level === 'very_high') score += 30;
        else if (formData.vulnerability_level === 'high') score += 25;
        else if (formData.vulnerability_level === 'medium') score += 15;
        else score += 5;

        if (formData.food_security_status === 'critical') score += 25;
        else if (formData.food_security_status === 'poor') score += 20;
        else if (formData.food_security_status === 'moderate') score += 10;

        if (formData.water_access === 'poor') score += 20;
        else if (formData.water_access === 'limited') score += 15;

        if (formData.healthcare_access === 'very_poor') score += 15;
        else if (formData.healthcare_access === 'poor') score += 10;

        return Math.min(score, 100);
      };

      const newAssessment = {
        ...formData,
        latitude: formData.latitude ? parseFloat(formData.latitude) : undefined,
        longitude: formData.longitude ? parseFloat(formData.longitude) : undefined,
        population: parseInt(formData.population) || 0,
        priority_score: calculatePriorityScore()
      };

      if (editingAssessment) {
        // Update existing assessment
        const updatedAssessment = { ...editingAssessment, ...newAssessment };
        setAssessments(prev => prev.map(a => a.id === editingAssessment.id ? updatedAssessment : a));
        setEditingAssessment(null);
      } else {
        // Add new assessment
        const assessment: VulnerabilityAssessment = {
          id: Date.now(),
          ...newAssessment,
          assessment_date: new Date().toISOString(),
          next_assessment_due: new Date(Date.now() + 180 * 24 * 60 * 60 * 1000).toISOString() // 6 months
        } as VulnerabilityAssessment;
        
        setAssessments(prev => [assessment, ...prev]);
      }

      // Reset form
      setFormData({
        community_name: '',
        location: '',
        latitude: '',
        longitude: '',
        population: '',
        vulnerability_level: 'medium',
        food_security_status: 'moderate',
        water_access: 'adequate',
        healthcare_access: 'limited',
        infrastructure_quality: 'poor',
        socioeconomic_factors: '',
        recommendations: '',
        assessed_by: '',
        climate_risks: [],
        risk_factors: []
      });
      setShowAddForm(false);
    } catch (error) {
      console.error('Failed to save assessment:', error);
    }
  };

  const handleEdit = (assessment: VulnerabilityAssessment) => {
    setEditingAssessment(assessment);
    setFormData({
      community_name: assessment.community_name,
      location: assessment.location,
      latitude: assessment.latitude?.toString() || '',
      longitude: assessment.longitude?.toString() || '',
      population: assessment.population.toString(),
      vulnerability_level: assessment.vulnerability_level,
      food_security_status: assessment.food_security_status,
      water_access: assessment.water_access,
      healthcare_access: assessment.healthcare_access,
      infrastructure_quality: assessment.infrastructure_quality,
      socioeconomic_factors: assessment.socioeconomic_factors,
      recommendations: assessment.recommendations,
      assessed_by: assessment.assessed_by,
      climate_risks: assessment.climate_risks,
      risk_factors: assessment.risk_factors
    });
    setShowAddForm(true);
  };

  const handleDelete = async (id: number) => {
    if (confirm('Are you sure you want to delete this assessment?')) {
      setAssessments(prev => prev.filter(a => a.id !== id));
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    setFormData(prev => ({
      ...prev,
      [e.target.name]: e.target.value
    }));
  };

  const handleMultiSelect = (name: string, value: string, checked: boolean) => {
    setFormData(prev => ({
      ...prev,
      [name]: checked 
        ? [...(prev[name as keyof typeof prev] as string[]), value]
        : (prev[name as keyof typeof prev] as string[]).filter(item => item !== value)
    }));
  };

  // Filter assessments
  const filteredAssessments = assessments.filter(assessment => {
    const matchesSearch = assessment.community_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         assessment.location.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesVulnerability = filterVulnerability === 'all' || assessment.vulnerability_level === filterVulnerability;
    
    let matchesPriority = true;
    if (filterPriority === 'high') {
      matchesPriority = assessment.priority_score >= 80;
    } else if (filterPriority === 'medium') {
      matchesPriority = assessment.priority_score >= 50 && assessment.priority_score < 80;
    } else if (filterPriority === 'low') {
      matchesPriority = assessment.priority_score < 50;
    }
    
    return matchesSearch && matchesVulnerability && matchesPriority;
  });

  // Calculate statistics
  const totalPopulation = assessments.reduce((sum, a) => sum + (a.population || 0), 0);
  const highVulnerabilityCount = assessments.filter(a => ['high', 'very_high'].includes(a.vulnerability_level)).length;
  const averagePriority = Math.round(assessments.reduce((sum, a) => sum + a.priority_score, 0) / assessments.length || 0);

  if (loading) {
    return (
      <div className="space-y-6">
        <div className="animate-pulse">
          <div className="h-8 bg-gray-200 rounded w-1/4 mb-4"></div>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
            {[...Array(4)].map((_, i) => (
              <div key={i} className="h-24 bg-gray-200 rounded"></div>
            ))}
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {[...Array(4)].map((_, i) => (
              <div key={i} className="h-80 bg-gray-200 rounded"></div>
            ))}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Vulnerability Assessment</h1>
          <p className="mt-2 text-gray-600">Assess community risks and resilience to climate-related disasters</p>
        </div>
        <div className="flex space-x-2 mt-4 sm:mt-0">
          <Button variant="outline">
            <FileText className="h-4 w-4 mr-2" />
            Export Report
          </Button>
          <Button onClick={() => setShowAddForm(true)}>
            <Plus className="h-4 w-4 mr-2" />
            New Assessment
          </Button>
        </div>
      </div>

      {/* Statistics */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <Shield className="h-8 w-8 text-blue-600" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-500">Total Assessments</p>
                <p className="text-2xl font-bold text-gray-900">{assessments.length}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <Users className="h-8 w-8 text-green-600" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-500">Population Covered</p>
                <p className="text-2xl font-bold text-gray-900">{totalPopulation.toLocaleString()}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <AlertTriangle className="h-8 w-8 text-red-600" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-500">High Vulnerability</p>
                <p className="text-2xl font-bold text-gray-900">{highVulnerabilityCount}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <BarChart3 className="h-8 w-8 text-yellow-600" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-500">Avg Priority Score</p>
                <p className="text-2xl font-bold text-gray-900">{averagePriority}</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Filters */}
      <Card>
        <CardContent className="p-4">
          <div className="flex flex-col sm:flex-row gap-4">
            <div className="flex-1">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                <Input
                  placeholder="Search communities or locations..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10"
                />
              </div>
            </div>
            <select
              value={filterVulnerability}
              onChange={(e) => setFilterVulnerability(e.target.value)}
              className="px-3 py-2 border border-gray-300 rounded-md bg-white"
            >
              <option value="all">All Vulnerability Levels</option>
              <option value="low">Low</option>
              <option value="medium">Medium</option>
              <option value="high">High</option>
              <option value="very_high">Very High</option>
            </select>
            <select
              value={filterPriority}
              onChange={(e) => setFilterPriority(e.target.value)}
              className="px-3 py-2 border border-gray-300 rounded-md bg-white"
            >
              <option value="all">All Priorities</option>
              <option value="high">High Priority (80+)</option>
              <option value="medium">Medium Priority (50-79)</option>
              <option value="low">Low Priority (&lt;50)</option>
            </select>
          </div>
        </CardContent>
      </Card>

      {/* Add/Edit Form Modal */}
      {showAddForm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <Card className="w-full max-w-4xl max-h-[90vh] overflow-y-auto">
            <CardHeader>
              <CardTitle>
                {editingAssessment ? 'Edit Vulnerability Assessment' : 'New Vulnerability Assessment'}
              </CardTitle>
            </CardHeader>
            <CardContent>
              <form onSubmit={handleSubmit} className="space-y-6">
                {/* Basic Information */}
                <div>
                  <h3 className="text-lg font-medium text-gray-900 mb-3">Basic Information</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <Input
                      label="Community Name"
                      name="community_name"
                      value={formData.community_name}
                      onChange={handleChange}
                      placeholder="e.g., Khayelitsha Township"
                      required
                    />
                    
                    <Input
                      label="Location"
                      name="location"
                      value={formData.location}
                      onChange={handleChange}
                      placeholder="City, Province, Country"
                      required
                    />
                    
                    <Input
                      label="Population"
                      name="population"
                      type="number"
                      value={formData.population}
                      onChange={handleChange}
                      placeholder="45000"
                      required
                    />
                    
                    <Input
                      label="Assessed By"
                      name="assessed_by"
                      value={formData.assessed_by}
                      onChange={handleChange}
                      placeholder="Organization/Team Name"
                      required
                    />
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
                    <Input
                      label="Latitude"
                      name="latitude"
                      type="number"
                      step="any"
                      value={formData.latitude}
                      onChange={handleChange}
                      placeholder="-26.2041"
                    />
                    
                    <Input
                      label="Longitude"
                      name="longitude"
                      type="number"
                      step="any"
                      value={formData.longitude}
                      onChange={handleChange}
                      placeholder="28.0473"
                    />
                  </div>
                </div>

                {/* Assessment Details */}
                <div>
                  <h3 className="text-lg font-medium text-gray-900 mb-3">Assessment Details</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="text-sm font-medium text-gray-700 block mb-1">
                        Overall Vulnerability Level
                      </label>
                      <select
                        name="vulnerability_level"
                        value={formData.vulnerability_level}
                        onChange={handleChange}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md bg-white"
                        required
                      >
                        <option value="low">Low</option>
                        <option value="medium">Medium</option>
                        <option value="high">High</option>
                        <option value="very_high">Very High</option>
                      </select>
                    </div>

                    <div>
                      <label className="text-sm font-medium text-gray-700 block mb-1">
                        Food Security Status
                      </label>
                      <select
                        name="food_security_status"
                        value={formData.food_security_status}
                        onChange={handleChange}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md bg-white"
                        required
                      >
                        <option value="good">Good</option>
                        <option value="moderate">Moderate</option>
                        <option value="poor">Poor</option>
                        <option value="critical">Critical</option>
                      </select>
                    </div>

                    <div>
                      <label className="text-sm font-medium text-gray-700 block mb-1">
                        Water Access
                      </label>
                      <select
                        name="water_access"
                        value={formData.water_access}
                        onChange={handleChange}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md bg-white"
                        required
                      >
                        <option value="excellent">Excellent</option>
                        <option value="adequate">Adequate</option>
                        <option value="limited">Limited</option>
                        <option value="poor">Poor</option>
                      </select>
                    </div>

                    <div>
                      <label className="text-sm font-medium text-gray-700 block mb-1">
                        Healthcare Access
                      </label>
                      <select
                        name="healthcare_access"
                        value={formData.healthcare_access}
                        onChange={handleChange}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md bg-white"
                        required
                      >
                        <option value="excellent">Excellent</option>
                        <option value="good">Good</option>
                        <option value="fair">Fair</option>
                        <option value="limited">Limited</option>
                        <option value="poor">Poor</option>
                        <option value="very_poor">Very Poor</option>
                      </select>
                    </div>
                  </div>
                </div>

                {/* Risk Factors & Climate Risks */}
                <div>
                  <h3 className="text-lg font-medium text-gray-900 mb-3">Risk Assessment</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                      <label className="text-sm font-medium text-gray-700 block mb-2">
                        Climate Risks (Select all that apply)
                      </label>
                      <div className="space-y-2 max-h-32 overflow-y-auto border rounded-md p-3">
                        {['drought', 'flooding', 'extreme_heat', 'storm_surge', 'sea_level_rise', 'wildfire', 'crop_failure'].map(risk => (
                          <label key={risk} className="flex items-center">
                            <input
                              type="checkbox"
                              checked={formData.climate_risks.includes(risk)}
                              onChange={(e) => handleMultiSelect('climate_risks', risk, e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm capitalize">{risk.replace('_', ' ')}</span>
                          </label>
                        ))}
                      </div>
                    </div>

                    <div>
                      <label className="text-sm font-medium text-gray-700 block mb-2">
                        Social Risk Factors (Select all that apply)
                      </label>
                      <div className="space-y-2 max-h-32 overflow-y-auto border rounded-md p-3">
                        {['unemployment', 'poverty', 'food_insecurity', 'poor_sanitation', 'overcrowding', 'isolation', 'poor_infrastructure'].map(factor => (
                          <label key={factor} className="flex items-center">
                            <input
                              type="checkbox"
                              checked={formData.risk_factors.includes(factor)}
                              onChange={(e) => handleMultiSelect('risk_factors', factor, e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm capitalize">{factor.replace('_', ' ')}</span>
                          </label>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>

                {/* Additional Information */}
                <div>
                  <h3 className="text-lg font-medium text-gray-900 mb-3">Additional Information</h3>
                  <div className="space-y-4">
                    <div>
                      <label className="text-sm font-medium text-gray-700 block mb-1">
                        Socioeconomic Factors
                      </label>
                      <textarea
                        name="socioeconomic_factors"
                        value={formData.socioeconomic_factors}
                        onChange={handleChange}
                        rows={3}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md resize-none"
                        placeholder="Describe economic conditions, employment, income levels, social dynamics..."
                      />
                    </div>

                    <div>
                      <label className="text-sm font-medium text-gray-700 block mb-1">
                        Recommendations
                      </label>
                      <textarea
                        name="recommendations"
                        value={formData.recommendations}
                        onChange={handleChange}
                        rows={4}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md resize-none"
                        placeholder="Specific recommendations to reduce vulnerability and improve resilience..."
                        required
                      />
                    </div>
                  </div>
                </div>

                <div className="flex justify-end space-x-2 pt-4 border-t">
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => {
                      setShowAddForm(false);
                      setEditingAssessment(null);
                      setFormData({
                        community_name: '',
                        location: '',
                        latitude: '',
                        longitude: '',
                        population: '',
                        vulnerability_level: 'medium',
                        food_security_status: 'moderate',
                        water_access: 'adequate',
                        healthcare_access: 'limited',
                        infrastructure_quality: 'poor',
                        socioeconomic_factors: '',
                        recommendations: '',
                        assessed_by: '',
                        climate_risks: [],
                        risk_factors: []
                      });
                    }}
                  >
                    Cancel
                  </Button>
                  <Button type="submit">
                    {editingAssessment ? 'Update Assessment' : 'Create Assessment'}
                  </Button>
                </div>
              </form>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Assessments List */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {filteredAssessments.map((assessment) => (
          <Card key={assessment.id} className="hover:shadow-lg transition-shadow">
            <CardHeader>
              <div className="flex items-start justify-between">
                <div>
                  <CardTitle className="text-xl">{assessment.community_name}</CardTitle>
                  <p className="text-sm text-gray-600 flex items-center mt-1">
                    <MapPin className="h-4 w-4 mr-1" />
                    {assessment.location}
                  </p>
                </div>
                <div className="flex flex-col space-y-1 items-end">
                  <Badge
                    variant={
                      assessment.vulnerability_level === 'very_high' ? 'destructive' :
                      assessment.vulnerability_level === 'high' ? 'warning' : 'default'
                    }
                  >
                    {assessment.vulnerability_level.replace('_', ' ').toUpperCase()}
                  </Badge>
                  <span className="text-xs text-gray-500">
                    Priority: {assessment.priority_score}
                  </span>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="flex items-center justify-between text-sm">
                  <span className="text-gray-600">Population:</span>
                  <span className="font-medium">{(assessment.population || 0).toLocaleString()}</span>
                </div>

                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div>
                    <span className="text-gray-600">Food Security:</span>
                    <Badge 
                      variant={assessment.food_security_status === 'critical' ? 'destructive' : 'secondary'}
                      className="ml-2 text-xs"
                    >
                      {assessment.food_security_status}
                    </Badge>
                  </div>
                  
                  <div>
                    <span className="text-gray-600">Water Access:</span>
                    <Badge 
                      variant={assessment.water_access === 'poor' ? 'destructive' : 'secondary'}
                      className="ml-2 text-xs"
                    >
                      {assessment.water_access}
                    </Badge>
                  </div>
                </div>

                <div>
                  <p className="text-sm text-gray-600 mb-2">Climate Risks:</p>
                  <div className="flex flex-wrap gap-1">
                    {assessment.climate_risks.slice(0, 3).map(risk => (
                      <Badge key={risk} variant="outline" className="text-xs">
                        {risk.replace('_', ' ')}
                      </Badge>
                    ))}
                    {assessment.climate_risks.length > 3 && (
                      <Badge variant="outline" className="text-xs">
                        +{assessment.climate_risks.length - 3} more
                      </Badge>
                    )}
                  </div>
                </div>

                <div>
                  <p className="text-sm text-gray-600 mb-1">Key Recommendations:</p>
                  <p className="text-sm text-gray-900 line-clamp-2">
                    {assessment.recommendations}
                  </p>
                </div>

                <div className="flex items-center justify-between pt-3 border-t text-xs text-gray-500">
                  <div className="flex items-center">
                    <Calendar className="h-3 w-3 mr-1" />
                    Assessed: {formatDate(assessment.assessment_date)}
                  </div>
                  <span>By: {assessment.assessed_by}</span>
                </div>

                <div className="flex justify-between items-center pt-2">
                  <span className="text-xs text-gray-500">
                    Next assessment: {formatDate(assessment.next_assessment_due)}
                  </span>
                  
                  <div className="flex space-x-2">
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => handleEdit(assessment)}
                    >
                      <Edit className="h-4 w-4" />
                    </Button>
                    <Button
                      size="sm"
                      variant="destructive"
                      onClick={() => handleDelete(assessment.id)}
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {filteredAssessments.length === 0 && (
        <Card>
          <CardContent className="p-12 text-center">
            <Shield className="h-12 w-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">No assessments found</h3>
            <p className="text-gray-600 mb-4">
              {searchTerm || filterVulnerability !== 'all' || filterPriority !== 'all'
                ? 'No assessments match your current filters.'
                : 'No vulnerability assessments have been conducted yet.'}
            </p>
            <Button onClick={() => setShowAddForm(true)}>
              <Plus className="h-4 w-4 mr-2" />
              Create First Assessment
            </Button>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default VulnerabilityAssessment;